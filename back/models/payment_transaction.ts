import { object, string, boolean, number, enums, defaulted, optional } from "https://deno.land/x/lesan@v0.1.8/mod.ts";

// Payment Transaction Status
export const paymentTransactionStatus = enums([
  "pending",           // Initial state, waiting for gateway processing
  "processing",        // Payment is being processed by gateway
  "completed",         // Payment successfully completed
  "failed",           // Payment failed
  "cancelled",        // Payment cancelled by user or system
  "expired",          // Payment session expired
  "refunded",         // Payment was refunded
  "partially_refunded", // Payment was partially refunded
  "disputed",         // Payment is under dispute
  "reversed",         // Payment was reversed
  "authorized",       // Payment authorized but not captured
  "captured",         // Payment captured after authorization
] as const);

// Payment Transaction Types
export const paymentTransactionType = enums([
  "payment",          // Regular payment
  "refund",          // Refund transaction
  "partial_refund",  // Partial refund transaction
  "chargeback",      // Chargeback transaction
  "adjustment",      // Manual adjustment
  "fee",             // Gateway fee transaction
  "bonus",           // Bonus or reward transaction
  "penalty",         // Penalty transaction
] as const);

// Payment Methods
export const paymentMethod = enums([
  "zarinpal",
  "mellat_bank",
  "saman_bank",
  "wallet",
  "bank_transfer",
  "crypto",
  "cash",
  "check",
] as const);

// Payment Purposes
export const paymentPurpose = enums([
  "wallet_charge",    // Charging wallet
  "course_purchase",  // Buying a course
  "workshop_booking", // Workshop registration
  "product_purchase", // Product purchase
  "space_booking",    // Coworking space booking
  "subscription",     // Subscription payment
  "service_fee",      // Service fee payment
  "penalty",          // Penalty payment
  "refund",          // Refund transaction
  "bonus",           // Bonus transaction
  "other",           // Other purposes
] as const);

// Currency types
export const currencyType = enums([
  "IRR",
  "USD",
  "EUR",
] as const);

// Payment Transaction Model
export const paymentTransaction = object({
  _id: optional(string()),

  // Transaction Identification
  transaction_id: string(), // Unique transaction ID (generated by system)
  reference_id: optional(string()), // Gateway reference ID
  authority: optional(string()), // Gateway authority (ZarinPal, etc.)
  tracking_code: optional(string()), // Bank tracking code
  receipt_number: optional(string()), // Receipt number for bank transfers

  // Transaction Details
  type: defaulted(paymentTransactionType, "payment"),
  purpose: paymentPurpose,
  status: defaulted(paymentTransactionStatus, "pending"),
  payment_method: paymentMethod,
  gateway_id: optional(string()), // Reference to payment_gateway collection

  // Amount Information
  amount: number(), // Original amount requested
  currency: defaulted(currencyType, "IRR"),
  gateway_fee: defaulted(number(), 0), // Fee charged by gateway
  platform_fee: defaulted(number(), 0), // Platform service fee
  tax_amount: defaulted(number(), 0), // Tax amount
  discount_amount: defaulted(number(), 0), // Discount applied
  final_amount: number(), // Final amount after all adjustments
  refunded_amount: defaulted(number(), 0), // Amount refunded so far

  // Related Entities
  user_id: string(), // Paying user ID
  order_id: optional(string()), // Related order ID
  invoice_id: optional(string()), // Related invoice ID
  wallet_transaction_id: optional(string()), // Related wallet transaction
  parent_transaction_id: optional(string()), // For refunds/adjustments

  // Gateway Specific Data
  gateway_data: defaulted(object({
    // ZarinPal specific
    zarinpal_authority: optional(string()),
    zarinpal_ref_id: optional(number()),
    zarinpal_card_hash: optional(string()),
    zarinpal_card_pan: optional(string()),
    zarinpal_fee_type: optional(string()),
    zarinpal_fee: optional(number()),

    // Mellat Bank specific
    mellat_ref_id: optional(string()),
    mellat_res_code: optional(string()),
    mellat_sale_order_id: optional(string()),
    mellat_sale_reference_id: optional(string()),
    mellat_card_holder_pan: optional(string()),

    // Saman Bank specific
    saman_ref_num: optional(string()),
    saman_res_code: optional(string()),
    saman_state: optional(string()),
    saman_trace_no: optional(string()),
    saman_secure_pan: optional(string()),

    // Wallet specific
    wallet_balance_before: optional(number()),
    wallet_balance_after: optional(number()),
    wallet_transaction_type: optional(string()),

    // Bank Transfer specific
    bank_name: optional(string()),
    account_number: optional(string()),
    iban: optional(string()),
    deposit_date: optional(string()),
    deposit_time: optional(string()),
    receipt_image_url: optional(string()),

    // Additional gateway data
    additional_data: defaulted(object({}), {}),
  }), {}),

  // Payment Processing Details
  processing: defaulted(object({
    initiated_at: optional(string()), // When payment was initiated
    gateway_request_at: optional(string()), // When sent to gateway
    gateway_response_at: optional(string()), // When response received
    completed_at: optional(string()), // When transaction completed
    verification_attempts: defaulted(number(), 0),
    last_verification_at: optional(string()),
    callback_received_at: optional(string()),
    callback_processed_at: optional(string()),

    // Processing metrics
    total_processing_time: optional(number()), // in milliseconds
    gateway_response_time: optional(number()), // in milliseconds
  }), {}),

  // Error and Retry Information
  error_info: defaulted(object({
    last_error_code: optional(string()),
    last_error_message: optional(string()),
    error_count: defaulted(number(), 0),
    retry_attempts: defaulted(number(), 0),
    max_retries: defaulted(number(), 3),
    next_retry_at: optional(string()),
    is_retryable: defaulted(boolean(), true),
    error_history: defaulted(enums([object({
      timestamp: string(),
      error_code: string(),
      error_message: string(),
      retry_attempt: number(),
    })]), []),
  }), {}),

  // Customer Information
  customer_info: defaulted(object({
    ip_address: optional(string()),
    user_agent: optional(string()),
    mobile: optional(string()),
    email: optional(string()),
    national_code: optional(string()),
    card_number_masked: optional(string()), // Last 4 digits only
    bank_name: optional(string()),
  }), {}),

  // Security and Fraud Prevention
  security: defaulted(object({
    risk_score: defaulted(number(), 0), // 0-100 risk assessment
    is_suspicious: defaulted(boolean(), false),
    fraud_check_passed: defaulted(boolean(), true),
    verification_required: defaulted(boolean(), false),
    verification_code: optional(string()),
    verification_expires_at: optional(string()),
    device_fingerprint: optional(string()),
    geolocation: optional(object({
      country: optional(string()),
      city: optional(string()),
      latitude: optional(number()),
      longitude: optional(number()),
    })),
  }), {}),

  // Notification and Communication
  notifications: defaulted(object({
    sms_sent: defaulted(boolean(), false),
    email_sent: defaulted(boolean(), false),
    webhook_sent: defaulted(boolean(), false),
    sms_sent_at: optional(string()),
    email_sent_at: optional(string()),
    webhook_sent_at: optional(string()),
    notification_attempts: defaulted(number(), 0),
    last_notification_error: optional(string()),
  }), {}),

  // Description and Notes
  description: string(), // Payment description shown to user
  internal_notes: defaulted(string(), ""), // Internal admin notes
  customer_notes: defaulted(string(), ""), // Customer provided notes
  admin_notes: defaulted(string(), ""), // Admin added notes

  // Metadata and Tags
  metadata: defaulted(object({
    source: optional(string()), // web, mobile_app, admin_panel
    campaign_id: optional(string()), // Marketing campaign ID
    referrer_url: optional(string()),
    user_session_id: optional(string()),
    device_type: optional(string()), // mobile, desktop, tablet
    browser_name: optional(string()),
    os_name: optional(string()),
    app_version: optional(string()),
    api_version: optional(string()),
    custom_fields: defaulted(object({}), {}),
  }), {}),

  // Audit and Tracking
  events: defaulted(enums([object({
    event_type: string(), // status_changed, error_occurred, retry_attempted, etc.
    timestamp: string(),
    details: object({}),
    user_id: optional(string()),
    admin_id: optional(string()),
  })]), []),

  // Reconciliation
  reconciliation: defaulted(object({
    is_reconciled: defaulted(boolean(), false),
    reconciled_at: optional(string()),
    reconciled_by: optional(string()), // Admin user ID
    settlement_date: optional(string()),
    settlement_amount: optional(number()),
    settlement_reference: optional(string()),
    discrepancy_amount: defaulted(number(), 0),
    discrepancy_reason: optional(string()),
  }), {}),

  // Performance Metrics
  metrics: defaulted(object({
    conversion_rate: optional(number()), // Success rate for this type
    average_processing_time: optional(number()),
    customer_satisfaction_score: optional(number()),
    bounce_rate: optional(number()), // Rate of abandoned payments
  }), {}),

  // Timestamps
  created_at: defaulted(string(), () => new Date().toISOString()),
  updated_at: defaulted(string(), () => new Date().toISOString()),
  expires_at: optional(string()), // Payment session expiration
  completed_at: optional(string()),
  cancelled_at: optional(string()),
  refunded_at: optional(string()),

  // Soft delete
  deleted_at: optional(string()),
  is_deleted: defaulted(boolean(), false),
}, {
  // Indexes for optimal performance
  indexes: [
    // Primary lookup indexes
    { key: { transaction_id: 1 }, unique: true, background: true },
    { key: { user_id: 1, status: 1 }, background: true },
    { key: { order_id: 1 }, background: true },
    { key: { invoice_id: 1 }, background: true },

    // Gateway specific indexes
    { key: { payment_method: 1, status: 1 }, background: true },
    { key: { gateway_id: 1 }, background: true },
    { key: { reference_id: 1 }, background: true },
    { key: { authority: 1 }, background: true },

    // Status and timing indexes
    { key: { status: 1, created_at: -1 }, background: true },
    { key: { type: 1, status: 1 }, background: true },
    { key: { purpose: 1, status: 1 }, background: true },

    // Financial indexes
    { key: { final_amount: 1, status: 1 }, background: true },
    { key: { currency: 1, created_at: -1 }, background: true },

    // Time-based indexes
    { key: { created_at: -1 }, background: true },
    { key: { updated_at: -1 }, background: true },
    { key: { expires_at: 1 }, background: true },
    { key: { completed_at: -1 }, background: true },

    // Reconciliation indexes
    { key: { "reconciliation.is_reconciled": 1, created_at: -1 }, background: true },
    { key: { "reconciliation.settlement_date": -1 }, background: true },

    // Security indexes
    { key: { "security.is_suspicious": 1 }, background: true },
    { key: { "customer_info.ip_address": 1, created_at: -1 }, background: true },

    // Parent-child relationship index
    { key: { parent_transaction_id: 1 }, background: true },

    // Compound indexes for common queries
    { key: { user_id: 1, payment_method: 1, status: 1 }, background: true },
    { key: { user_id: 1, created_at: -1, status: 1 }, background: true },
    { key: { payment_method: 1, created_at: -1, final_amount: 1 }, background: true },
  ],
});

// Type exports
export type PaymentTransactionStatus = typeof paymentTransactionStatus.enum;
export type PaymentTransactionType = typeof paymentTransactionType.enum;
export type PaymentMethod = typeof paymentMethod.enum;
export type PaymentPurpose = typeof paymentPurpose.enum;
export type CurrencyType = typeof currencyType.enum;
export type PaymentTransaction = typeof paymentTransaction.pure;

// Helper functions for transaction management
export const generateTransactionId = (): string => {
  const timestamp = Date.now().toString();
  const random = Math.random().toString(36).substring(2);
  return `TXN_${timestamp}_${random}`.toUpperCase();
};

export const isTransactionCompleted = (transaction: PaymentTransaction): boolean => {
  return transaction.status === "completed";
};

export const isTransactionPending = (transaction: PaymentTransaction): boolean => {
  return ["pending", "processing", "authorized"].includes(transaction.status);
};

export const isTransactionFailed = (transaction: PaymentTransaction): boolean => {
  return ["failed", "cancelled", "expired"].includes(transaction.status);
};

export const isTransactionRefundable = (transaction: PaymentTransaction): boolean => {
  return transaction.status === "completed" &&
    transaction.refunded_amount < transaction.final_amount;
};

export const canRetryTransaction = (transaction: PaymentTransaction): boolean => {
  const { error_info } = transaction;
  return error_info.is_retryable &&
    error_info.retry_attempts < error_info.max_retries;
};

export const calculateRefundableAmount = (transaction: PaymentTransaction): number => {
  return transaction.final_amount - transaction.refunded_amount;
};

export const addTransactionEvent = (
  transaction: PaymentTransaction,
  eventType: string,
  details: any,
  userId?: string,
  adminId?: string
): void => {
  transaction.events.push({
    event_type: eventType,
    timestamp: new Date().toISOString(),
    details,
    user_id: userId,
    admin_id: adminId,
  });
  transaction.updated_at = new Date().toISOString();
};

// Transaction status update helper
export const updateTransactionStatus = (
  transaction: PaymentTransaction,
  newStatus: PaymentTransactionStatus,
  details?: any
): void => {
  const oldStatus = transaction.status;
  transaction.status = newStatus;
  transaction.updated_at = new Date().toISOString();

  // Set completion timestamp
  if (newStatus === "completed" && !transaction.completed_at) {
    transaction.completed_at = new Date().toISOString();
  }

  // Set cancellation timestamp
  if (newStatus === "cancelled" && !transaction.cancelled_at) {
    transaction.cancelled_at = new Date().toISOString();
  }

  // Set refund timestamp
  if (newStatus === "refunded" && !transaction.refunded_at) {
    transaction.refunded_at = new Date().toISOString();
  }

  // Add event log
  addTransactionEvent(transaction, "status_changed", {
    old_status: oldStatus,
    new_status: newStatus,
    ...details
  });
};

// Default transaction values
export const createDefaultTransaction = (
  userId: string,
  amount: number,
  purpose: PaymentPurpose,
  paymentMethod: PaymentMethod,
  description: string
): Partial<PaymentTransaction> => {
  return {
    transaction_id: generateTransactionId(),
    user_id: userId,
    amount,
    final_amount: amount,
    purpose,
    payment_method: paymentMethod,
    description,
    status: "pending",
    type: "payment",
    currency: "IRR",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  };
};
