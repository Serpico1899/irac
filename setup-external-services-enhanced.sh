#!/bin/bash

# IRAC External Services Enhanced Setup Script
# Version: 2.0
# Purpose: Complete configuration of all external services for production
# Author: IRAC Development Team
# Date: December 2024

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_FILE="$SCRIPT_DIR/back/.env"
ENV_FRONTEND="$SCRIPT_DIR/front/.env.local"
CONFIG_DIR="$SCRIPT_DIR/config"
LOGS_DIR="$SCRIPT_DIR/logs"

# Ensure directories exist
mkdir -p "$CONFIG_DIR" "$LOGS_DIR"

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOGS_DIR/setup.log"
}

error() {
    echo -e "${RED}[ERROR $(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOGS_DIR/setup.log"
}

warning() {
    echo -e "${YELLOW}[WARNING $(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOGS_DIR/setup.log"
}

info() {
    echo -e "${BLUE}[INFO $(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOGS_DIR/setup.log"
}

success() {
    echo -e "${GREEN}[SUCCESS $(date +'%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOGS_DIR/setup.log"
}

# Banner
print_banner() {
    clear
    echo -e "${PURPLE}"
    cat << 'EOF'
██╗██████╗  █████╗  ██████╗    ███████╗███████╗██████╗ ██╗   ██╗██╗ ██████╗███████╗███████╗
██║██╔══██╗██╔══██╗██╔════╝    ██╔════╝██╔════╝██╔══██╗██║   ██║██║██╔════╝██╔════╝██╔════╝
██║██████╔╝███████║██║         ███████╗█████╗  ██████╔╝██║   ██║██║██║     █████╗  ███████╗
██║██╔══██╗██╔══██║██║         ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██║██║     ██╔══╝  ╚════██║
██║██║  ██║██║  ██║╚██████╗    ███████║███████╗██║  ██║ ╚████╔╝ ██║╚██████╗███████╗███████║
╚═╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝    ╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚═╝ ╚═════╝╚══════╝╚══════╝

███████╗███╗   ██╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗███████╗██████╗     ███████╗███████╗████████╗██╗   ██╗██████╗
██╔════╝████╗  ██║██║  ██║██╔══██╗████╗  ██║██╔════╝██╔════╝██╔══██╗    ██╔════╝██╔════╝╚══██╔══╝██║   ██║██╔══██╗
█████╗  ██╔██╗ ██║███████║███████║██╔██╗ ██║██║     █████╗  ██║  ██║    ███████╗█████╗     ██║   ██║   ██║██████╔╝
██╔══╝  ██║╚██╗██║██╔══██║██╔══██║██║╚██╗██║██║     ██╔══╝  ██║  ██║    ╚════██║██╔══╝     ██║   ██║   ██║██╔═══╝
███████╗██║ ╚████║██║  ██║██║  ██║██║ ╚████║╚██████╗███████╗██████╔╝    ███████║███████╗   ██║   ╚██████╔╝██║
╚══════╝╚═╝  ╚═══╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝╚══════╝╚═════╝     ╚══════╝╚══════╝   ╚═╝    ╚═════╝ ╚═╝
EOF
    echo -e "${NC}"
    echo -e "${CYAN}Interactive Resource and Assessment Center${NC}"
    echo -e "${YELLOW}External Services Enhanced Configuration System${NC}"
    echo -e "${GREEN}Version: 2.0 - Production Ready${NC}"
    echo -e "${BLUE}Status: Configuring Production Services${NC}"
    echo ""
}

# Environment setup functions
setup_env_files() {
    log "Setting up environment files..."

    # Backend .env setup
    if [[ ! -f "$ENV_FILE" ]]; then
        log "Creating backend .env file..."
        cat > "$ENV_FILE" << 'EOF'
# IRAC Backend Environment Configuration
# Generated by setup-external-services-enhanced.sh

# Server Configuration
NODE_ENV=production
PORT=1405
HOST=0.0.0.0

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/irac_production

# Authentication
JWT_SECRET=your_super_secure_jwt_secret_key_change_this_in_production
JWT_EXPIRES_IN=24h
JWT_REFRESH_EXPIRES_IN=7d

# Security
BCRYPT_ROUNDS=12
RATE_LIMIT_ENABLED=true
RATE_LIMIT_WINDOW=900000
RATE_LIMIT_MAX=100

# SMS Configuration (To be configured)
SMS_PROVIDER=kavenegar
KAVENEGAR_API_KEY=
KAVENEGAR_SENDER=
SMS_TIMEOUT=30000

# Email Configuration (To be configured)
SMTP_HOST=
SMTP_PORT=587
SMTP_SECURE=true
SMTP_USER=
SMTP_PASSWORD=
EMAIL_FROM=noreply@irac.local
EMAIL_FROM_NAME=IRAC Platform

# Payment Configuration (To be configured)
PAYMENT_GATEWAY=zarinpal
ZARINPAL_MERCHANT_ID=
ZARINPAL_MODE=sandbox
ZARINPAL_CALLBACK_URL=http://localhost:3000/payment/callback

# File Storage Configuration
FILE_STORAGE=local
LOCAL_UPLOAD_PATH=./uploads
LOCAL_PUBLIC_URL=http://localhost:1405/files
MAX_FILE_SIZE=52428800

# Monitoring (To be configured)
SENTRY_DSN=
SENTRY_ENVIRONMENT=production
SENTRY_TRACES_SAMPLE_RATE=0.1

# Logging
LOG_LEVEL=info
LOG_FILE=./logs/backend.log
EOF
    fi

    # Frontend .env setup
    if [[ ! -f "$ENV_FRONTEND" ]]; then
        log "Creating frontend .env.local file..."
        cat > "$ENV_FRONTEND" << 'EOF'
# IRAC Frontend Environment Configuration
# Generated by setup-external-services-enhanced.sh

# API Configuration
NEXT_PUBLIC_API_URL=http://localhost:1405
LESAN_URL=http://localhost:1405/lesan

# Environment
NODE_ENV=production

# Analytics (To be configured)
NEXT_PUBLIC_GA_TRACKING_ID=
NEXT_PUBLIC_GTM_ID=

# External Services URLs
NEXT_PUBLIC_FRONTEND_URL=http://localhost:3000
NEXT_PUBLIC_BACKEND_URL=http://localhost:1405
EOF
    fi

    success "Environment files created successfully"
}

# SMS Service Configuration
configure_sms_service() {
    echo ""
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}                    SMS SERVICE CONFIGURATION${NC}"
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo ""

    echo -e "${YELLOW}Choose your SMS provider:${NC}"
    echo -e "${BLUE}1)${NC} Kavenegar (Recommended for Iran)"
    echo -e "${BLUE}2)${NC} SMS.ir (Alternative for Iran)"
    echo -e "${BLUE}3)${NC} Twilio (International)"
    echo -e "${BLUE}4)${NC} Skip SMS configuration"
    echo ""

    read -p "Enter your choice (1-4): " sms_choice

    case $sms_choice in
        1)
            configure_kavenegar
            ;;
        2)
            configure_smsir
            ;;
        3)
            configure_twilio
            ;;
        4)
            warning "Skipping SMS configuration"
            ;;
        *)
            error "Invalid choice. Skipping SMS configuration."
            ;;
    esac
}

configure_kavenegar() {
    log "Configuring Kavenegar SMS service..."

    echo -e "${YELLOW}Kavenegar Configuration:${NC}"
    echo "1. Visit: https://panel.kavenegar.com"
    echo "2. Register/Login to your account"
    echo "3. Go to Settings -> API Key"
    echo "4. Copy your API Key"
    echo ""

    read -p "Enter your Kavenegar API Key: " kavenegar_key
    read -p "Enter your sender number (optional, leave empty for default): " kavenegar_sender

    if [[ -n "$kavenegar_key" ]]; then
        # Update backend .env
        sed -i "s/SMS_PROVIDER=.*/SMS_PROVIDER=kavenegar/" "$ENV_FILE"
        sed -i "s/KAVENEGAR_API_KEY=.*/KAVENEGAR_API_KEY=$kavenegar_key/" "$ENV_FILE"
        sed -i "s/KAVENEGAR_SENDER=.*/KAVENEGAR_SENDER=$kavenegar_sender/" "$ENV_FILE"

        success "Kavenegar configured successfully"

        # Test SMS service
        test_sms_service "kavenegar" "$kavenegar_key"
    else
        warning "No API key provided. SMS service not configured."
    fi
}

configure_smsir() {
    log "Configuring SMS.ir service..."

    echo -e "${YELLOW}SMS.ir Configuration:${NC}"
    echo "1. Visit: https://sms.ir"
    echo "2. Register/Login to your account"
    echo "3. Go to API section"
    echo "4. Get your API credentials"
    echo ""

    read -p "Enter your SMS.ir API Key: " smsir_key
    read -p "Enter your SMS.ir Secret Key: " smsir_secret
    read -p "Enter your line number: " smsir_line

    if [[ -n "$smsir_key" ]] && [[ -n "$smsir_secret" ]]; then
        # Update backend .env
        sed -i "s/SMS_PROVIDER=.*/SMS_PROVIDER=smsir/" "$ENV_FILE"
        sed -i "/KAVENEGAR_API_KEY=/a SMSIR_API_KEY=$smsir_key" "$ENV_FILE"
        sed -i "/SMSIR_API_KEY=/a SMSIR_SECRET_KEY=$smsir_secret" "$ENV_FILE"
        sed -i "/SMSIR_SECRET_KEY=/a SMSIR_LINE_NUMBER=$smsir_line" "$ENV_FILE"

        success "SMS.ir configured successfully"
    else
        warning "Incomplete credentials. SMS service not configured."
    fi
}

configure_twilio() {
    log "Configuring Twilio SMS service..."

    echo -e "${YELLOW}Twilio Configuration:${NC}"
    echo "1. Visit: https://console.twilio.com"
    echo "2. Get your Account SID and Auth Token"
    echo "3. Purchase a phone number"
    echo ""

    read -p "Enter your Twilio Account SID: " twilio_sid
    read -p "Enter your Twilio Auth Token: " twilio_token
    read -p "Enter your Twilio phone number (with country code): " twilio_phone

    if [[ -n "$twilio_sid" ]] && [[ -n "$twilio_token" ]]; then
        # Update backend .env
        sed -i "s/SMS_PROVIDER=.*/SMS_PROVIDER=twilio/" "$ENV_FILE"
        sed -i "/KAVENEGAR_API_KEY=/a TWILIO_ACCOUNT_SID=$twilio_sid" "$ENV_FILE"
        sed -i "/TWILIO_ACCOUNT_SID=/a TWILIO_AUTH_TOKEN=$twilio_token" "$ENV_FILE"
        sed -i "/TWILIO_AUTH_TOKEN=/a TWILIO_PHONE_NUMBER=$twilio_phone" "$ENV_FILE"

        success "Twilio configured successfully"
    else
        warning "Incomplete credentials. SMS service not configured."
    fi
}

test_sms_service() {
    local provider=$1
    local api_key=$2

    log "Testing SMS service connectivity..."

    case $provider in
        "kavenegar")
            if curl -s -f "https://api.kavenegar.com/v1/$api_key/account/info.json" > /dev/null 2>&1; then
                success "✅ Kavenegar API connection successful"
            else
                error "❌ Kavenegar API connection failed"
            fi
            ;;
        *)
            info "SMS service test not implemented for $provider"
            ;;
    esac
}

# Email Service Configuration
configure_email_service() {
    echo ""
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}                   EMAIL SERVICE CONFIGURATION${NC}"
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo ""

    echo -e "${YELLOW}Choose your email provider:${NC}"
    echo -e "${BLUE}1)${NC} Mailgun (Recommended)"
    echo -e "${BLUE}2)${NC} SendGrid"
    echo -e "${BLUE}3)${NC} AWS SES"
    echo -e "${BLUE}4)${NC} Custom SMTP"
    echo -e "${BLUE}5)${NC} Skip email configuration"
    echo ""

    read -p "Enter your choice (1-5): " email_choice

    case $email_choice in
        1)
            configure_mailgun
            ;;
        2)
            configure_sendgrid
            ;;
        3)
            configure_aws_ses
            ;;
        4)
            configure_custom_smtp
            ;;
        5)
            warning "Skipping email configuration"
            ;;
        *)
            error "Invalid choice. Skipping email configuration."
            ;;
    esac
}

configure_mailgun() {
    log "Configuring Mailgun email service..."

    echo -e "${YELLOW}Mailgun Configuration:${NC}"
    echo "1. Visit: https://app.mailgun.com"
    echo "2. Add and verify your domain"
    echo "3. Get your SMTP credentials from Settings -> API Keys"
    echo ""

    read -p "Enter your Mailgun domain (e.g., mg.yourdomain.com): " mailgun_domain
    read -p "Enter your Mailgun SMTP username: " mailgun_user
    read -p "Enter your Mailgun SMTP password: " mailgun_password
    read -p "Enter your sender email: " sender_email

    if [[ -n "$mailgun_domain" ]] && [[ -n "$mailgun_user" ]] && [[ -n "$mailgun_password" ]]; then
        # Update backend .env
        sed -i "s/SMTP_HOST=.*/SMTP_HOST=smtp.mailgun.org/" "$ENV_FILE"
        sed -i "s/SMTP_USER=.*/SMTP_USER=$mailgun_user/" "$ENV_FILE"
        sed -i "s/SMTP_PASSWORD=.*/SMTP_PASSWORD=$mailgun_password/" "$ENV_FILE"
        sed -i "s/EMAIL_FROM=.*/EMAIL_FROM=${sender_email:-noreply@$mailgun_domain}/" "$ENV_FILE"

        success "Mailgun configured successfully"
        test_email_service "mailgun" "$mailgun_user" "$mailgun_password"
    else
        warning "Incomplete credentials. Email service not configured."
    fi
}

configure_sendgrid() {
    log "Configuring SendGrid email service..."

    echo -e "${YELLOW}SendGrid Configuration:${NC}"
    echo "1. Visit: https://app.sendgrid.com"
    echo "2. Go to Settings -> API Keys"
    echo "3. Create a new API key with full access"
    echo ""

    read -p "Enter your SendGrid API Key: " sendgrid_key
    read -p "Enter your sender email: " sender_email

    if [[ -n "$sendgrid_key" ]]; then
        # Update backend .env
        sed -i "s/SMTP_HOST=.*/SMTP_HOST=smtp.sendgrid.net/" "$ENV_FILE"
        sed -i "s/SMTP_USER=.*/SMTP_USER=apikey/" "$ENV_FILE"
        sed -i "s/SMTP_PASSWORD=.*/SMTP_PASSWORD=$sendgrid_key/" "$ENV_FILE"
        sed -i "s/EMAIL_FROM=.*/EMAIL_FROM=${sender_email:-noreply@yourdomain.com}/" "$ENV_FILE"

        success "SendGrid configured successfully"
    else
        warning "No API key provided. Email service not configured."
    fi
}

configure_aws_ses() {
    log "Configuring AWS SES email service..."

    echo -e "${YELLOW}AWS SES Configuration:${NC}"
    echo "1. Visit AWS SES console"
    echo "2. Verify your domain/email"
    echo "3. Create SMTP credentials"
    echo ""

    read -p "Enter AWS region (e.g., us-east-1): " aws_region
    read -p "Enter SMTP username: " smtp_user
    read -p "Enter SMTP password: " smtp_password
    read -p "Enter your sender email: " sender_email

    if [[ -n "$aws_region" ]] && [[ -n "$smtp_user" ]] && [[ -n "$smtp_password" ]]; then
        # Update backend .env
        sed -i "s/SMTP_HOST=.*/SMTP_HOST=email-smtp.$aws_region.amazonaws.com/" "$ENV_FILE"
        sed -i "s/SMTP_USER=.*/SMTP_USER=$smtp_user/" "$ENV_FILE"
        sed -i "s/SMTP_PASSWORD=.*/SMTP_PASSWORD=$smtp_password/" "$ENV_FILE"
        sed -i "s/EMAIL_FROM=.*/EMAIL_FROM=${sender_email:-noreply@yourdomain.com}/" "$ENV_FILE"

        success "AWS SES configured successfully"
    else
        warning "Incomplete credentials. Email service not configured."
    fi
}

configure_custom_smtp() {
    log "Configuring custom SMTP service..."

    read -p "Enter SMTP host: " smtp_host
    read -p "Enter SMTP port (default 587): " smtp_port
    read -p "Enter SMTP username: " smtp_user
    read -p "Enter SMTP password: " smtp_password
    read -p "Enter sender email: " sender_email

    smtp_port=${smtp_port:-587}

    if [[ -n "$smtp_host" ]] && [[ -n "$smtp_user" ]] && [[ -n "$smtp_password" ]]; then
        # Update backend .env
        sed -i "s/SMTP_HOST=.*/SMTP_HOST=$smtp_host/" "$ENV_FILE"
        sed -i "s/SMTP_PORT=.*/SMTP_PORT=$smtp_port/" "$ENV_FILE"
        sed -i "s/SMTP_USER=.*/SMTP_USER=$smtp_user/" "$ENV_FILE"
        sed -i "s/SMTP_PASSWORD=.*/SMTP_PASSWORD=$smtp_password/" "$ENV_FILE"
        sed -i "s/EMAIL_FROM=.*/EMAIL_FROM=${sender_email:-noreply@yourdomain.com}/" "$ENV_FILE"

        success "Custom SMTP configured successfully"
    else
        warning "Incomplete credentials. Email service not configured."
    fi
}

test_email_service() {
    local provider=$1
    local username=$2
    local password=$3

    log "Testing email service connectivity..."

    # Basic SMTP connection test
    if command -v telnet > /dev/null 2>&1; then
        timeout 5 telnet smtp.mailgun.org 587 < /dev/null > /dev/null 2>&1
        if [[ $? -eq 0 ]]; then
            success "✅ SMTP connection successful"
        else
            warning "⚠️ SMTP connection test inconclusive"
        fi
    else
        info "telnet not available, skipping connection test"
    fi
}

# Payment Gateway Configuration
configure_payment_service() {
    echo ""
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}                 PAYMENT GATEWAY CONFIGURATION${NC}"
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo ""

    echo -e "${YELLOW}Choose your payment gateway:${NC}"
    echo -e "${BLUE}1)${NC} ZarinPal (Iran)"
    echo -e "${BLUE}2)${NC} Stripe (International)"
    echo -e "${BLUE}3)${NC} PayPal"
    echo -e "${BLUE}4)${NC} Skip payment configuration"
    echo ""

    read -p "Enter your choice (1-4): " payment_choice

    case $payment_choice in
        1)
            configure_zarinpal
            ;;
        2)
            configure_stripe
            ;;
        3)
            configure_paypal
            ;;
        4)
            warning "Skipping payment configuration"
            ;;
        *)
            error "Invalid choice. Skipping payment configuration."
            ;;
    esac
}

configure_zarinpal() {
    log "Configuring ZarinPal payment gateway..."

    echo -e "${YELLOW}ZarinPal Configuration:${NC}"
    echo "1. Visit: https://www.zarinpal.com"
    echo "2. Create merchant account"
    echo "3. Get your Merchant ID from dashboard"
    echo ""

    read -p "Enter your ZarinPal Merchant ID: " zarinpal_merchant
    read -p "Use sandbox mode? (y/n): " use_sandbox

    if [[ -n "$zarinpal_merchant" ]]; then
        mode="production"
        if [[ "$use_sandbox" == "y" ]] || [[ "$use_sandbox" == "Y" ]]; then
            mode="sandbox"
        fi

        # Update backend .env
        sed -i "s/PAYMENT_GATEWAY=.*/PAYMENT_GATEWAY=zarinpal/" "$ENV_FILE"
        sed -i "s/ZARINPAL_MERCHANT_ID=.*/ZARINPAL_MERCHANT_ID=$zarinpal_merchant/" "$ENV_FILE"
        sed -i "s/ZARINPAL_MODE=.*/ZARINPAL_MODE=$mode/" "$ENV_FILE"

        success "ZarinPal configured successfully"
        test_payment_service "zarinpal" "$zarinpal_merchant"
    else
        warning "No merchant ID provided. Payment service not configured."
    fi
}

configure_stripe() {
    log "Configuring Stripe payment gateway..."

    echo -e "${YELLOW}Stripe Configuration:${NC}"
    echo "1. Visit: https://stripe.com"
    echo "2. Create account and get API keys"
    echo "3. Configure webhooks"
    echo ""

    read -p "Enter your Stripe Publishable Key: " stripe_public
    read -p "Enter your Stripe Secret Key: " stripe_secret
    read -p "Enter your Webhook Secret (optional): " webhook_secret

    if [[ -n "$stripe_public" ]] && [[ -n "$stripe_secret" ]]; then
        # Update backend .env
        sed -i "s/PAYMENT_GATEWAY=.*/PAYMENT_GATEWAY=stripe/" "$ENV_FILE"
        sed -i "/ZARINPAL_MERCHANT_ID=/a STRIPE_PUBLIC_KEY=$stripe_public" "$ENV_FILE"
        sed -i "/STRIPE_PUBLIC_KEY=/a STRIPE_SECRET_KEY=$stripe_secret" "$ENV_FILE"

        if [[ -n "$webhook_secret" ]]; then
            sed -i "/STRIPE_SECRET_KEY=/a STRIPE_WEBHOOK_SECRET=$webhook_secret" "$ENV_FILE"
        fi

        # Update frontend .env
        echo "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=$stripe_public" >> "$ENV_FRONTEND"

        success "Stripe configured successfully"
    else
        warning "Incomplete credentials. Payment service not configured."
    fi
}

configure_paypal() {
    log "Configuring PayPal payment gateway..."

    echo -e "${YELLOW}PayPal Configuration:${NC}"
    echo "1. Visit: https://developer.paypal.com"
    echo "2. Create application"
    echo "3. Get Client ID and Secret"
    echo ""

    read -p "Enter your PayPal Client ID: " paypal_client_id
    read -p "Enter your PayPal Client Secret: " paypal_secret
    read -p "Use sandbox mode? (y/n): " use_sandbox

    if [[ -n "$paypal_client_id" ]] && [[ -n "$paypal_secret" ]]; then
        mode="production"
        if [[ "$use_sandbox" == "y" ]] || [[ "$use_sandbox" == "Y" ]]; then
            mode="sandbox"
        fi

        # Update backend .env
        sed -i "s/PAYMENT_GATEWAY=.*/PAYMENT_GATEWAY=paypal/" "$ENV_FILE"
        sed -i "/ZARINPAL_MERCHANT_ID=/a PAYPAL_CLIENT_ID=$paypal_client_id" "$ENV_FILE"
        sed -i "/PAYPAL_CLIENT_ID=/a PAYPAL_CLIENT_SECRET=$paypal_secret" "$ENV_FILE"
        sed -i "/PAYPAL_CLIENT_SECRET=/a PAYPAL_MODE=$mode" "$ENV_FILE"

        success "PayPal configured successfully"
    else
        warning "Incomplete credentials. Payment service not configured."
    fi
}

test_payment_service() {
    local gateway=$1
    local merchant_id=$2

    log "Testing payment gateway connectivity..."

    case $gateway in
        "zarinpal")
            test_data='{"merchant_id":"'$merchant_id'","amount":1000,"description":"Test"}'
            if curl -s -X POST "https://api.zarinpal.com/pg/v4/payment/request.json" \
                -H "Content-Type: application/json" \
                -d "$test_data" | grep -q "100"; then
                success "✅ ZarinPal API connection successful"
            else
                warning "⚠️ ZarinPal API test inconclusive (may need merchant verification)"
            fi
            ;;
        *)
            info "Payment gateway test not implemented for $gateway"
            ;;
    esac
}

# File Storage Configuration
configure_file_storage() {
    echo ""
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}                   FILE STORAGE CONFIGURATION${NC}"
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo ""

    echo -e "${YELLOW}Choose your file storage:${NC}"
    echo -e "${BLUE}1)${NC} Local storage (current setup)"
    echo -e "${BLUE}2)${NC} AWS S3"
    echo -e "${BLUE}3)${NC} Arvan Cloud (Iran)"
    echo -e "${BLUE}4)${NC} Google Cloud Storage"
    echo -e "${BLUE}5)${NC} Skip storage configuration"
    echo ""

    read -p "Enter your choice (1-5): " storage_choice

    case $storage_choice in
        1)
            configure_local_storage
            ;;
        2)
            configure_aws_s3
            ;;
        3)
            configure_arvan_cloud
            ;;
        4)
            configure_google_cloud
            ;;
        5)
            warning "Skipping file storage configuration"
            ;;
        *)
            error "Invalid choice. Keeping local storage."
            ;;
    esac
}

configure_local_storage() {
    log "Configuring local file storage..."

    local upload_dir="./uploads"
    mkdir -p "$SCRIPT_DIR/$upload_dir"
    chmod 755 "$SCRIPT_DIR/$upload_dir"

    success "Local storage configured and ready"
}

configure_aws_s3() {
    log "Configuring AWS S3 storage..."

    echo -e "${YELLOW}AWS S3 Configuration:${NC}"
    echo "1. Create S3 bucket"
    echo "2. Configure IAM user with S3 permissions"
    echo "3. Get access keys"
    echo ""

    read -p "Enter AWS Access Key ID: " aws_key
    read -p "Enter AWS Secret Access Key: " aws_secret
    read -p "Enter AWS Region (e.g., us-east-1): " aws_region
    read -p "Enter S3 Bucket Name: " bucket_name

    if [[ -n "$aws_key" ]] && [[ -n "$aws_secret" ]] && [[ -n "$bucket_name" ]]; then
        # Update backend .env
        sed -i "s/FILE_STORAGE=.*/FILE_STORAGE=s3/" "$ENV_FILE"
        sed -i "/FILE_STORAGE=s3/a AWS_ACCESS_KEY_ID=$aws_key" "$ENV_FILE"
        sed -i "/AWS_ACCESS_KEY_ID=/a AWS_SECRET_ACCESS_KEY=$aws_secret" "$ENV_FILE"
        sed -i "/AWS_SECRET_ACCESS_KEY=/a AWS_REGION=${aws_region:-us-east-1}" "$ENV_FILE"
        sed -i "/AWS_REGION=/a S3_BUCKET_NAME=$bucket_name" "$ENV_FILE"
        sed -i "/S3_BUCKET_NAME=/a S3_PUBLIC_URL=https://$bucket_name.s3.amazonaws.com" "$ENV_FILE"

        success "AWS S3 configured successfully"
    else
        warning "Incomplete credentials. File storage not configured."
    fi
}

configure_arvan_cloud() {
    log "Configuring Arvan Cloud storage..."

    echo -e "${YELLOW}Arvan Cloud Configuration:${NC}"
    echo "1. Visit: https://panel.arvancloud.com"
    echo "2. Create Object Storage bucket"
    echo "3. Get access credentials"
    echo ""

    read -p "Enter Arvan Access Key: " arvan_key
    read -p "Enter Arvan Secret Key: " arvan_secret
    read -p "Enter Bucket Name: " bucket_name

    if [[ -n "$arvan_key" ]] && [[ -n "$arvan_secret" ]] && [[ -n "$bucket_name" ]]; then
        # Update backend .env
        sed -i "s/FILE_STORAGE=.*/FILE_STORAGE=arvan/" "$ENV_FILE"
        sed -i "/FILE_STORAGE=arvan/a ARVAN_ACCESS_KEY=$arvan_key" "$ENV_FILE"
        sed -i "/ARVAN_ACCESS_KEY=/a ARVAN_SECRET_KEY=$arvan_secret" "$ENV_FILE"
        sed -i "/ARVAN_SECRET_KEY=/a ARVAN_ENDPOINT=https://s3.ir-thr-at1.arvanstorage.com" "$ENV_FILE"
        sed -i "/ARVAN_ENDPOINT=/a ARVAN_BUCKET=$bucket_name" "$ENV_FILE"

        success "Arvan Cloud configured successfully"
    else
        warning "Incomplete credentials. File storage not configured."
    fi
}

configure_google_cloud() {
    log "Configuring Google Cloud Storage..."

    echo -e "${YELLOW}Google Cloud Storage Configuration:${NC}"
    echo "1. Create GCS bucket"
    echo "2. Create service account with Storage Admin role"
    echo "3. Download JSON key file"
    echo ""

    read -p "Enter path to service account JSON file: " gcs_key_file
    read -p "Enter bucket name: " bucket_name

    if [[ -n "$gcs_key_file" ]] && [[ -f "$gcs_key_file" ]] && [[ -n "$bucket_name" ]]; then
        # Copy key file to config directory
        cp "$gcs_key_file" "$CONFIG_DIR/gcs-key.json"

        # Update backend .env
        sed -i "s/FILE_STORAGE=.*/FILE_STORAGE=gcs/" "$ENV_FILE"
        sed -i "/FILE_STORAGE=gcs/a GCS_KEY_FILE=./config/gcs-key.json" "$ENV_FILE"
        sed -i "/GCS_KEY_FILE=/a GCS_BUCKET_NAME=$bucket_name" "$ENV_FILE"

        success "Google Cloud Storage configured successfully"
    else
        warning "Key file not found or incomplete configuration."
    fi
}

# Monitoring Configuration
configure_monitoring() {
    echo ""
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}                   MONITORING CONFIGURATION${NC}"
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo ""

    echo -e "${YELLOW}Configure monitoring services:${NC}"
    echo -e "${BLUE}1)${NC} Sentry (Error Tracking)"
    echo -e "${BLUE}2)${NC} Google Analytics"
    echo -e "${BLUE}3)${NC} Both"
    echo -e "${BLUE}4)${NC} Skip monitoring configuration"
    echo ""

    read -p "Enter your choice (1-4): " monitoring_choice

    case $monitoring_choice in
        1)
            configure_sentry
            ;;
        2)
            configure_analytics
            ;;
        3)
            configure_sentry
            configure_analytics
            ;;
        4)
            warning "Skipping monitoring configuration"
            ;;
        *)
            error "Invalid choice. Skipping monitoring configuration."
            ;;
    esac
}

configure_sentry() {
    log "Configuring Sentry error tracking..."

    echo -e "${YELLOW}Sentry Configuration:${NC}"
    echo "1. Visit: https://sentry.io"
    echo "2. Create project"
    echo "3. Get your DSN from project settings"
    echo ""

    read -p "Enter your Sentry DSN: " sentry_dsn

    if [[ -n "$sentry_dsn" ]]; then
        # Update backend .env
        sed -i "s|SENTRY_DSN=.*|SENTRY_DSN=$sentry_dsn|" "$ENV_FILE"

        success "Sentry configured successfully"
    else
        warning "No DSN provided. Sentry not configured."
    fi
}

configure_analytics() {
    log "Configuring Google Analytics..."

    echo -e "${YELLOW}Google Analytics Configuration:${NC}"
    echo "1. Visit: https://analytics.google.com"
    echo "2. Create GA4 property"
    echo "3. Get your Measurement ID"
    echo ""

    read -p "Enter your Google Analytics Measurement ID (G-XXXXXXXXXX): " ga_id
    read -p "Enter your Google Tag Manager ID (optional): " gtm_id

    if [[ -n "$ga_id" ]]; then
        # Update frontend .env
        sed -i "s/NEXT_PUBLIC_GA_TRACKING_ID=.*/NEXT_PUBLIC_GA_TRACKING_ID=$ga_id/" "$ENV_FRONTEND"

        if [[ -n "$gtm_id" ]]; then
            sed -i "s/NEXT_PUBLIC_GTM_ID=.*/NEXT_PUBLIC_GTM_ID=$gtm_id/" "$ENV_FRONTEND"
        fi

        success "Google Analytics configured successfully"
    else
        warning "No tracking ID provided. Analytics not configured."
    fi
}

# Security Configuration
configure_security() {
    log "Configuring security settings..."

    echo -e "${YELLOW}Security Configuration:${NC}"
    read -p "Generate new JWT secret? (y/n): " generate_jwt

    if [[ "$generate_jwt" == "y" ]] || [[ "$generate_jwt" == "Y" ]]; then
        # Generate strong JWT secret
        jwt_secret=$(openssl rand -hex 64)
        sed -i "s/JWT_SECRET=.*/JWT_SECRET=$jwt_secret/" "$ENV_FILE"
        success "New JWT secret generated"
    fi

    # Set secure file permissions
    chmod 600 "$ENV_FILE" "$ENV_FRONTEND"
    success "Environment file permissions secured"
}

# Generate configuration summary
generate_summary() {
    echo ""
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}                   CONFIGURATION SUMMARY${NC}"
    echo -e "${PURPLE}═══════════════════════════════════════════════════════════════${NC}"
    echo ""

    local summary_file="$LOGS_DIR/configuration-summary.txt"

    {
        echo "IRAC External Services Configuration Summary"
        echo "Generated: $(date)"
        echo "========================================"
        echo ""

        echo "SMS SERVICE:"
        if grep -q "SMS_PROVIDER=kavenegar" "$ENV_FILE" && grep -q "KAVENEGAR_API_KEY=.\+" "$ENV_FILE"; then
            echo "  ✅ Kavenegar configured"
        elif grep -q "SMS_PROVIDER=smsir" "$ENV_FILE"; then
            echo "  ✅ SMS.ir configured"
        elif grep -q "SMS_PROVIDER=twilio" "$ENV_FILE"; then
            echo "  ✅ Twilio configured"
        else
            echo "  ❌ Not configured"
        fi
        echo ""

        echo "EMAIL SERVICE:"
        if grep -q "SMTP_HOST=smtp.mailgun.org" "$ENV_FILE"; then
            echo "  ✅ Mailgun configured"
        elif grep -q "SMTP_HOST=smtp.sendgrid.net" "$ENV_FILE"; then
            echo "  ✅ SendGrid configured"
        elif grep -q "SMTP_HOST=email-smtp" "$ENV_FILE"; then
            echo "  ✅ AWS SES configured"
        elif grep -q "SMTP_HOST=.\+" "$ENV_FILE"; then
            echo "  ✅ Custom SMTP configured"
        else
            echo "  ❌ Not configured"
        fi
        echo ""

        echo "PAYMENT GATEWAY:"
        if grep -q "PAYMENT_GATEWAY=zarinpal" "$ENV_FILE" && grep -q "ZARINPAL_MERCHANT_ID=.\+" "$ENV_FILE"; then
            echo "  ✅ ZarinPal configured"
        elif grep -q "PAYMENT_GATEWAY=stripe" "$ENV_FILE"; then
            echo "  ✅ Stripe configured"
        elif grep -q "PAYMENT_GATEWAY=paypal" "$ENV_FILE"; then
            echo "  ✅ PayPal configured"
        else
            echo "  ❌ Not configured"
        fi
        echo ""

        echo "FILE STORAGE:"
        if grep -q "FILE_STORAGE=s3" "$ENV_FILE"; then
            echo "  ✅ AWS S3 configured"
        elif grep -q "FILE_STORAGE=arvan" "$ENV_FILE"; then
            echo "  ✅ Arvan Cloud configured"
        elif grep -q "FILE_STORAGE=gcs" "$ENV_FILE"; then
            echo "  ✅ Google Cloud Storage configured"
        else
            echo "  ✅ Local storage (default)"
        fi
        echo ""

        echo "MONITORING:"
        if grep -q "SENTRY_DSN=.\+" "$ENV_FILE"; then
            echo "  ✅ Sentry error tracking configured"
        else
            echo "  ❌ Sentry not configured"
        fi

        if grep -q "NEXT_PUBLIC_GA_TRACKING_ID=.\+" "$ENV_FRONTEND" 2>/dev/null; then
            echo "  ✅ Google Analytics configured"
        else
            echo "  ❌ Google Analytics not configured"
        fi
        echo ""

        echo "SECURITY:"
        if grep -q "JWT_SECRET=.\{32,\}" "$ENV_FILE"; then
            echo "  ✅ JWT secret configured"
        else
            echo "  ⚠️  Using default JWT secret (should be changed)"
        fi
        echo ""

    } | tee "$summary_file"

    success "Configuration summary saved to: $summary_file"
}

# Validation and testing
run_validation_tests() {
    log "Running validation tests..."

    local test_results="$LOGS_DIR/validation-results.txt"

    {
        echo "IRAC Services Validation Results"
        echo "Generated: $(date)"
        echo "==============================="
        echo ""

        # Test backend connectivity
        if curl -s -f http://localhost:1405/health > /dev/null 2>&1; then
            echo "✅ Backend service: RUNNING"
        else
            echo "❌ Backend service: NOT RESPONDING"
        fi

        # Test frontend connectivity
        if curl -s -f http://localhost:3000 > /dev/null 2>&1; then
            echo "✅ Frontend service: RUNNING"
        else
            echo "❌ Frontend service: NOT RESPONDING"
        fi

        # Test database connectivity
        if pgrep mongod > /dev/null; then
            echo "✅ MongoDB: RUNNING"
        else
            echo "❌ MongoDB: NOT RUNNING"
        fi

        echo ""
        echo "Configuration Files:"
        if [[ -f "$ENV_FILE" ]]; then
            echo "✅ Backend .env: EXISTS"
        else
            echo "❌ Backend .env: MISSING"
        fi

        if [[ -f "$ENV_FRONTEND" ]]; then
            echo "✅ Frontend .env.local: EXISTS"
        else
            echo "❌ Frontend .env.local: MISSING"
        fi

    } | tee "$test_results"

    success "Validation results saved to: $test_results"
}

# Cleanup function
cleanup() {
    log "Performing cleanup..."

    # Set proper permissions
    find "$LOGS_DIR" -type f -exec chmod 644 {} \;
    find "$CONFIG_DIR" -type f -exec chmod 600 {} \;

    success "Cleanup completed"
}

# Main execution
main() {
    print_banner

    log "Starting IRAC External Services Enhanced Setup..."
    log "Script directory: $SCRIPT_DIR"
    log "Backend .env: $ENV_FILE"
    log "Frontend .env: $ENV_FRONTEND"

    # Setup environment files first
    setup_env_files

    # Configure services
    configure_sms_service
    configure_email_service
    configure_payment_service
    configure_file_storage
    configure_monitoring
    configure_security

    # Generate summary and validate
    generate_summary
    run_validation_tests
    cleanup

    echo ""
    echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${CYAN}              IRAC EXTERNAL SERVICES SETUP COMPLETE!${NC}"
    echo -e "${GREEN}═══════════════════════════════════════════════════════════════${NC}"
    echo ""
    echo -e "${YELLOW}Next Steps:${NC}"
    echo -e "${BLUE}1.${NC} Review configuration summary: ${LOGS_DIR}/configuration-summary.txt"
    echo -e "${BLUE}2.${NC} Check validation results: ${LOGS_DIR}/validation-results.txt"
    echo -e "${BLUE}3.${NC} Restart IRAC services: ./launch-irac.sh restart"
    echo -e "${BLUE}4.${NC} Run production tests: ./verify-endpoints.js"
    echo -e "${BLUE}5.${NC} Deploy to production: ./deploy-production.sh"
    echo ""
    echo -e "${GREEN}🎉 Your IRAC platform is now configured with external services!${NC}"
    echo -e "${CYAN}📊 Configuration logs available in: ${LOGS_DIR}/${NC}"
    echo ""
}

# Error handling
trap cleanup EXIT

# Check if running as main script
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
